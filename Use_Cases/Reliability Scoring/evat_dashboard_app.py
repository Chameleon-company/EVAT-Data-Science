# -*- coding: utf-8 -*-
"""evat_dashboard_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VE7093TJjrzjBTWaFeen6-lJ9Cpy2sJ9
"""



# EVAT Streamlit Dashboard (Final Version with Aesthetic Theme)
# To run: streamlit run evat_dashboard.py

import pandas as pd
import streamlit as st
import folium
from streamlit_folium import st_folium
import plotly.express as px
from datetime import datetime

# ------------------- Page Config -------------------
st.set_page_config(
    layout="wide",
    page_title="EVAT - Charger Dashboard",
    page_icon="üîã"
)

# ------------------- Custom Theme Styling -------------------
st.markdown("""
    <style>
    /* General app background */
    .main {
        background-color: #f1f9f6 !important;
        font-family: 'Segoe UI', sans-serif;
        color: #1c1c1c;
    }

    /* Header title */
    h1, h2, h3 {
        color: #1e3d59 !important;
        font-weight: 700 !important;
    }

    /* Subheaders */
    .css-hyum1k, .css-1v3fvcr {
        color: #305f72 !important;
        font-weight: 600 !important;
        font-size: 22px !important;
    }

    /* Dropdowns */
    .stSelectbox > div {
        background-color: #e5f4ef !important;
        color: #1e3d59 !important;
        border-radius: 10px;
        font-weight: 600;
        border: 1px solid #b2dcd2 !important;
    }

    /* Buttons */
    .stButton > button {
        background-color: #c8ede4 !important;
        color: #1e3d59 !important;
        font-weight: 600 !important;
        border-radius: 8px !important;
        border: 1px solid #91cfc1 !important;
        padding: 0.5rem 1rem !important;
    }

    .stButton > button:hover {
        background-color: #a7ded0 !important;
        color: #000 !important;
        border-color: #7ac7b4 !important;
    }

    /* Metric containers */
    .stMetric {
        background-color: #e1f5ec !important;
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 1rem;
        box-shadow: 0 4px 10px rgba(0,0,0,0.05);
    }

    /* Table / Chart containers */
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }

    .css-1d391kg, .css-1offfwp, .css-1cpxqw2 {
        background-color: #ffffff !important;
        border-radius: 14px !important;
        padding: 1.2rem !important;
        box-shadow: 0 4px 12px rgba(0,0,0,0.06);
    }

    /* Sidebar (optional) */
    .css-6qob1r {
        background-color: #daf0e7 !important;
    }

    </style>
""", unsafe_allow_html=True)

# ------------------- Load Data -------------------
@st.cache_data
def load_data():
    df = pd.read_csv("EVAT-Final-Enriched.csv")
    df['Last_Checked'] = pd.to_datetime(df['Last_Checked'], errors='coerce')
    df['reliability_score'] = pd.to_numeric(df['reliability_score'], errors='coerce')
    df['Uptime_%'] = pd.to_numeric(df['Uptime_%'], errors='coerce')
    df['Downtime_%'] = pd.to_numeric(df['Downtime_%'], errors='coerce')
    return df

df = load_data()

# ------------------- Dashboard Title -------------------
st.markdown("### ‚ö° Uptime vs Downtime Trends")
st.title("üöó EVAT - Charger Station Monitoring Dashboard")
st.markdown("Visualising reliability, feedback, and uptime metrics for EV chargers across Melbourne.")

# ------------------- Suburb Filter -------------------
suburbs = ["All"] + sorted(df['Suburb'].dropna().unique())
selected_suburb = st.selectbox("üîç Filter by Suburb", suburbs)

if selected_suburb != "All":
    df = df[df['Suburb'] == selected_suburb]

# ------------------- Charger Map -------------------
st.markdown("### üìç Charger Locations on Map")
charger_map = folium.Map(location=[-37.8136, 144.9631], zoom_start=11)

for _, row in df.dropna(subset=['latitude', 'longitude']).iterrows():
    popup_info = f"""
    <b>{row['Charger Name']}</b><br>
    {row['Address']}, {row['Suburb']}<br>
    <b>Status:</b> {row['Status']}<br>
    <b>Reliability:</b> {row['reliability_score']}<br>
    <b>Uptime:</b> {row['Uptime_%']}%<br>
    <b>Feedback:</b> {row['User_Feedback'] if pd.notna(row['User_Feedback']) else 'No comment'}
    """
    folium.Marker(
        location=[row['latitude'], row['longitude']],
        tooltip=row['Charger Name'],
        popup=popup_info,
        icon=folium.Icon(color="green" if row['Status'].lower() == "online" else "red")
    ).add_to(charger_map)

st_folium(charger_map, width=1000, height=500)

# ------------------- Uptime vs Downtime Chart -------------------
st.markdown("### üìä Uptime vs Downtime")
uptime_chart = px.scatter(
    df,
    x="Uptime_%",
    y="Downtime_%",
    color="Status",
    hover_data=["Charger Name", "Suburb"],
    title="Charger Uptime vs Downtime (%)"
)
st.plotly_chart(uptime_chart, use_container_width=True)

# ------------------- Reliability Histogram -------------------
st.markdown("### üìà Reliability Score Distribution")
reliability_hist = px.histogram(
    df,
    x="reliability_score",
    nbins=20,
    title="Distribution of Reliability Scores"
)
st.plotly_chart(reliability_hist, use_container_width=True)

# ------------------- Feedback -------------------
st.markdown("### üí¨ User Feedback")
feedback_df = df[df['User_Feedback'].notna()][['Charger Name', 'Rating', 'User_Feedback']]
if not feedback_df.empty:
    st.dataframe(feedback_df, use_container_width=True)
else:
    st.info("No user feedback available.")

# ------------------- Last Updated -------------------
st.caption(f"Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

import streamlit as st
import pandas as pd
import plotly.express as px
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer

# Ensure VADER lexicon is downloaded
nltk.download("vader_lexicon")
sia = SentimentIntensityAnalyzer()

# Load your data
df = pd.read_csv("EVAT-Final-Enriched.csv")
df = df.dropna(subset=["User_Feedback"])

# Apply sentiment scoring
def analyze_sentiment(text):
    scores = sia.polarity_scores(text)
    compound = scores["compound"]
    label = (
        "Positive" if compound >= 0.1 else
        "Negative" if compound <= -0.1 else
        "Neutral"
    )
    return pd.Series([compound, label])


df[["Sentiment_Score", "Sentiment_Label"]] = df["User_Feedback"].apply(analyze_sentiment)

# Title & Style
st.title("üîã EVAT Sentiment Dashboard for Charger Stations")

# Custom theme
st.markdown("""
    <style>
    .block-container {
        padding-top: 2rem;
        background: linear-gradient(to bottom, #d4f5dc, #f0fff0);
    }
    h1 {
        color: #006400;
        font-family: 'Segoe UI', sans-serif;
    }
    </style>
""", unsafe_allow_html=True)

# Pie Chart of Sentiment Distribution
st.subheader("üîç Sentiment Distribution")
sentiment_counts = df["Sentiment_Label"].value_counts().reset_index()
sentiment_counts.columns = ["Sentiment", "Count"]
fig = px.pie(sentiment_counts, names="Sentiment", values="Count",
             color_discrete_sequence=["#00B050", "#FFC000", "#C00000"],
             hole=0.5)
fig.update_traces(textinfo="percent+label")
st.plotly_chart(fig)

# Dropdown + Filter
selected_sentiment = st.selectbox("üìä Filter chargers by sentiment:", ["Positive", "Neutral", "Negative"])
filtered_df = df[df["Sentiment_Label"] == selected_sentiment][["Charger Name", "Rating", "User_Feedback", "Sentiment_Score"]]

# Output table
st.subheader(f"üìç Chargers with {selected_sentiment} Feedback")
st.dataframe(filtered_df, use_container_width=True)

df = pd.read_csv("EVAT-Final-Enriched.csv")